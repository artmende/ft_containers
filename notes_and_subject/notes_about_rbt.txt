
RED BLACK PROPERTIES : 

- red node cannot have only 1 child. either 2 or 0.
- black must always have a sibling, only exception is the root


INSERTION :
Inspired by those videos (Many thanks to them !) : 
	https://www.youtube.com/playlist?list=PL9xmBV_5YoZNqDI8qfOZgzbqahCUmUEin
	https://www.youtube.com/watch?v=qA02XWRTBdw

after inserting node, look at the parent of the node just inserted.

recolor means invert the color

if parent black, no problem

if parent red :

	- if uncle red : recolor parent, uncle, and also grand parent only if grand parent is not root, then recheck GRAND PARENT if it is now red

	- if uncle black : look at the new node, parent and grand parent. do they form a line ? (a grand parent has to exist, because parent is red)
		* if they do not form a line : rotate parent opposite to new node, it is now a line and we can do same as above considering the last node(parent) as newnode. (just recheck the parent)
		* if they form a line : recolor parent and grand parent and rotate GRAND PARENT to direction opposite to new node. no need to recheck anything



DELETION :
Inspired by this article (Many thanks to the author !) : https://medium.com/analytics-vidhya/deletion-in-red-black-rb-tree-92301e1474ea
Please see the summary chart picture attached

If deleted node is leaf : 
	- If it is RED or root, just delete it. done.
	- If is it BLACK, replace it by double black temp node, and follow steps for double black

If deleted node is not leaf : replace deleted node by successor/predecessor (in subtree !!).
- If the node that we move up has a child (it cannot have 2), simply connect the child to the moved node parent and color that child black. That child will always be red (because a black node always have a sibling)
- If the node that we move up has no child : 
	* if it is red, just move it, finished
	* if it is black, replace if by double black temp node and follow double black steps.



Steps for double black :
look at sibling of double black : 
	- if red, its case 4
	- if black, look at the far child of sibling :
		* if its red, its case 6
		* if its black, look at the near child of sibling : 
			+ if it's black, it's case 3
			+ if it's red, it's case 5

A note on case 6 : the red node that becomes black is the original sibling far red child before rotation
Another note on case 6 : deallocate and destroy double black if its a temporary node

